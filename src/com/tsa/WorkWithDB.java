package com.tsa;

import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.File;
import java.net.MalformedURLException;
import java.sql.*;
import java.util.Scanner;


public class WorkWithDB extends Application {
    private TextArea informationBlock;
    private TextArea inputBlock;
    private TextArea inputTable;
    private DataBase dataBase;
    private Button tableSetButton;
    private Button myStringButton;
    int typeOfRequiredTable = 0;
    private String url;
    private int tableForDelete=0;

    public void start(Stage stage) {

        StackPane root = new StackPane();
        informationBlock = new TextArea("–í–≤–µ–¥–∏—Ç–µ Start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ë–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ ");
        inputBlock = new TextArea();
        inputTable = new TextArea();
        Image imageDB = null;
        myStringButton = new Button("set string");
        tableSetButton = new Button("Table");
        Button backToMainScreen = new Button("Main screen");

        Button confirmButton = new Button("Confirm");
        File image = new File("/Users/tessergey/Downloads/asdasd.jpg");
        File fileDB = new File("/Users/tessergey/Downloads/DB_2.png");

        try {
            String localUrl = fileDB.toURI().toURL().toString();
            imageDB = new Image(localUrl, 70, 70, false, false);
        } catch (MalformedURLException e ) {

        }

        try {
            url = image.toURI().toURL().toString();
        } catch (MalformedURLException e) {
            System.out.println("Bad in url load image");
        }

        BackgroundImage myBI = new BackgroundImage(new Image(url, 1000, 1000, false, true),
                BackgroundRepeat.REPEAT, BackgroundRepeat.NO_REPEAT, BackgroundPosition.DEFAULT,
                BackgroundSize.DEFAULT);

        root.setBackground(new Background(myBI));
        confirmButton.setMinSize(200, 50);
        myStringButton.setMinSize(200, 50);
        tableSetButton.setMinSize(200,50);

        backToMainScreen.setMinSize(100, 50);

        tableSetButton = new Button("Table");

        root.setAlignment(Pos.CENTER);

        //–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—Ç—É–ø–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        StackPane.setMargin(informationBlock, new Insets(100, 100, 200, 100.0));
        StackPane.setMargin(inputBlock, new Insets(700, 100, 200, 100));
        StackPane.setMargin(confirmButton, new Insets(800, 200, 200, 0));
        StackPane.setMargin(myStringButton, new Insets(800,-200, 200, 0));
        StackPane.setMargin(inputTable, new Insets(800, 250, 200, 750.0));
        StackPane.setMargin(tableSetButton, new Insets(800, 125, 200, 725));
        ImageView imageView = new ImageView(imageDB);
        StackPane.setMargin(imageView, new Insets(650, 150, 350, 850));
        StackPane.setMargin(backToMainScreen, new Insets(700,800,400,200));

        //–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        backToMainScreen.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                informationBlock.setText("");
                whatNext();
            }
        });

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É Confirm
        confirmButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                double value = imageView.getRotate();
                imageView.setRotate(value + 20);

                String answer = inputBlock.getText();
                if (answer.equalsIgnoreCase("Start")) {
                    answerStart();
                    whatNext();
                } else if (answer.equalsIgnoreCase("DropDB")) {
                    answerDropDB();
                    informationBlock.setText("–ö–æ–Ω–µ—Ü");
                } else if (answer.equalsIgnoreCase("SelectAll")) {
                    answerSelectAll();
                } else if (answer.equalsIgnoreCase("OK")) {
                    whatNext();
                } else if (answer.equalsIgnoreCase("Insert")) {
                    informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É");
                    typeOfRequiredTable = 1;
                } else if (answer.equalsIgnoreCase("Search")) {
                    informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É");
                    typeOfRequiredTable = 2;
                } else if (answer.equalsIgnoreCase("Clear")) {
                    informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É");
                    typeOfRequiredTable = 3;
                } else if (answer.equalsIgnoreCase("ClearAll")) {
                    answerClearReallyAllTables();
                } else if (answer.equalsIgnoreCase("Delete")) {
                    inputBlock.setText("");
                    informationBlock.setText("1. Delete constant\n2. Delete my string");
                } else if (answer.equalsIgnoreCase("Delete constant")) {
                    informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å");
                    typeOfRequiredTable = 4;
                } else if (answer.equalsIgnoreCase("Delete my string")) {
                    informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å");
                    typeOfRequiredTable = 5;
                } else if (answer.equalsIgnoreCase("Update")) {
                    informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å");
                    typeOfRequiredTable = 6;
                }
            }
        });

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É Table
        tableSetButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                double value = imageView.getRotate();
                imageView.setRotate(value + 20);

                String answer = inputTable.getText();
                int a = Integer.parseInt(answer);
                helpForHandler(a);
            }
        });

        //–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        myStringButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent actionEvent) {
                double value = imageView.getRotate();
                imageView.setRotate(value + 20);
                String name = inputBlock.getText();
                answerDeleteMyString(name);
            }
        });

        //–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ø–∞–Ω–µ–ª—å
        root.getChildren().addAll(informationBlock,confirmButton,inputBlock,tableSetButton,inputTable,myStringButton,imageView, backToMainScreen);

        //–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ü–µ–Ω—ã
        Scene scene = new Scene(root, 250, 250);
        stage.setScene(scene);
        stage.setTitle("üñ§DataBase‚ÄºÔ∏èüñ§üòà");
        stage.setWidth(1000);
        stage.setHeight(1000);
        stage.show();
    }

    private void answerUpdate() {

    }

    //–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞ Delete, Insert.. –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    private void helpForHandler(int i) {

        if (typeOfRequiredTable == 1) {
            switch (i) {
                case 1:
                    answerInsert(1);
                    break;
                case 2:
                    answerInsert(2);
                    break;
                case 3:
                    answerInsert(3);
                    break;
                case 4:
                    answerInsert(4);
                    break;
                default:
                    informationBlock.setText("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç");
                    break;
            }
        } else if (typeOfRequiredTable == 2) {
            switch (i) {
                case 1:
                    answerSearch(1);
                    break;
                case 2:
                    answerSearch(2);
                    break;
                case 3:
                    answerSearch(3);
                    break;
                case 4:
                    answerSearch(4);
                    break;
                default:
                    informationBlock.setText("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç");
                    break;
            }
        } else if (typeOfRequiredTable == 3) {
            switch (i) {
                case 1:
                    answerClearAll(1);
                    break;
                case 2:
                    answerClearAll(2);
                    break;
                case 3:
                    answerClearAll(3);
                    break;
                case 4:
                    answerClearAll(4);
                    break;
                default:
                    informationBlock.setText("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç");
                    break;

            }
        } else if (typeOfRequiredTable == 4) {
            switch (i) {
                case 1:
                    answerDeleteConstant(1);
                    break;
                case 2:
                    answerDeleteConstant(2);
                    break;
                case 3:
                    answerDeleteConstant(3);
                    break;
                case 4:
                    answerDeleteConstant(4);
                    break;
                default:
                    informationBlock.setText("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç");
                    break;
            }
        } else if (typeOfRequiredTable ==5) {
            switch (i) {
                case 1:
                    answerDeleteMyString(1);
                    break;
                case 2:
                    answerDeleteMyString(2);
                    break;
                case 3:
                    answerDeleteMyString(3);
                    break;
                case 4:
                    answerDeleteMyString(4);
                    break;
                default:
                    informationBlock.setText("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç");
                    break;
            }
        } else if (typeOfRequiredTable==6) {
            switch (i) {
                case 1:
                    answerUpdate(1);
                    break;
                case 2:
                    answerUpdate(2);
                    break;
                case 3:
                    answerUpdate(3);
                    break;
                case 4:
                    answerUpdate(4);
                    break;
                default:
                    informationBlock.setText("–¢–∞–±–ª–∏—Ü—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç");
                    break;
            }
        }
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –ë–î –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –∫–æ—Ä—Ç–µ–∂–∞
    private void answerUpdate(int table) {

        try {
            switch (table) {
                case 1:
                    dataBase.updateTable1(dataBase.nameDataBase,table);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
                    break;
                case 2:
                    dataBase.updateTable2(dataBase.nameDataBase,table);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
                    break;
                case 3:
                    dataBase.updateTable3(dataBase.nameDataBase,table);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
                    break;
                case 4:
                    dataBase.updateTable4(dataBase.nameDataBase,table);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
                    break;
            }
        } catch (SQLException e) {
            System.out.println("Bad in update");
        }


    }

    //–ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    private void answerDeleteMyString(int table) {
        informationBlock.setText("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
        inputBlock.setText("");
        tableForDelete=table;
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é, –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private void answerDeleteMyString(String name) {
        try {
            switch (tableForDelete) {
                case 1:
                    dataBase.deleteTable1(dataBase.nameDataBase,name);
                    informationBlock.setText("–ò–∑ —Ç–∞–±–ª–∏—Ü—ã " + tableForDelete+" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º " + name);
                    break;
                case 2:
                    dataBase.deleteTable2(dataBase.nameDataBase,name);
                    informationBlock.setText("–ò–∑ —Ç–∞–±–ª–∏—Ü—ã " + tableForDelete+" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º " + name);
                    break;
                case 3:
                    dataBase.deleteTable3(dataBase.nameDataBase,name);
                    informationBlock.setText("–ò–∞ —Ç–∞–±–ª–∏—Ü—ã " + tableForDelete+" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º " + name);
                    break;
            }

        }catch (SQLException e) {
            System.out.println("Bad in my string delete");
        }
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –Ω–µ –∫–ª—é—á–µ–≤–æ–º—É –ø–æ–ª—é
    private void answerDeleteConstant(int table) {
        try {
            switch (table) {
                case 1:
                    dataBase.deleteTable1(dataBase.nameDataBase, "Petr");
                    informationBlock.setText("–°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º Petr —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    inputBlock.setText("");
                    break;
                case 2:
                    dataBase.deleteTable2(dataBase.nameDataBase, "Around the world");
                    informationBlock.setText("–°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º Around the world —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    inputBlock.setText("");
                    break;
                case 3:
                    dataBase.deleteTable3(dataBase.nameDataBase, "Pedro");
                    informationBlock.setText("–°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º Pedro —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    inputBlock.setText("");
                    break;
                case 4:
                    dataBase.deleteTable4(dataBase.nameDataBase, 100);
                    informationBlock.setText("–°—Ç—Ä–æ–∫–∞ 100 —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    inputBlock.setText("");
                    break;
            }
        } catch (SQLException e) {
            System.out.println("Bad in const delete");
        }
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    private void answerClearReallyAllTables() {
        try {
            dataBase.deleteAllElementTable4(dataBase.nameDataBase);
        } catch (SQLException e) {
            System.out.println("Bad in really clear all");
        }
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    private void answerClearAll(int table) {
        try {
            switch (table) {
                case 1:
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    dataBase.deleteDataFromTable1(dataBase.nameDataBase);
                    inputTable.setText("");
                    break;
                case 2:
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    dataBase.deleteAllElementTable2(dataBase.nameDataBase);
                    inputTable.setText("");
                    break;
                case 3:
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    dataBase.deleteAllElementTable3(dataBase.nameDataBase);
                    inputTable.setText("");
                    break;
                case 4:
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã " + table);
                    dataBase.deleteAllElementTable4(dataBase.nameDataBase);
                    inputTable.setText("");
                    break;
            }
        } catch (SQLException e) {
            System.out.println("Bad in clear");
        }

    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–æ–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—é
    private void answerSearch(int table) {
        String name = "";
        try {
            switch (table) {
                case 1:
                    name = "Kate";
                    informationBlock.setText(dataBase.searchTable1(dataBase.nameDataBase, name));
                    inputTable.setText("");
                    break;
                case 2:
                    name = "Deep learning";
                    informationBlock.setText(dataBase.searchTable2(dataBase.nameDataBase, name));
                    inputTable.setText("");
                    break;
                case 3:
                    name = "Pedro";
                    informationBlock.setText(dataBase.searchTable3(dataBase.nameDataBase, name));
                    inputTable.setText("");
                    break;
                case 4:
                    int nameInt = 100;
                    informationBlock.setText(dataBase.searchTable4(dataBase.nameDataBase, nameInt));
                    inputTable.setText("");
                    break;
            }

        } catch (SQLException e) {
            System.out.println("Bad in search");
        }
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
    private void answerInsert(int table) {
        inputBlock.setText("");
        try {
            switch (table) {
                case 1:
                    dataBase.insertTable1(dataBase.nameTable1, dataBase.nameDataBase,
                            6, "8912121212", "Pupok", "asdf@mail.ru",
                            40, 1);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + dataBase.selectFromTable1(dataBase.nameDataBase, dataBase.nameTable1));
                    inputTable.setText("");
                    break;
                case 2:
                    dataBase.insertTable2(dataBase.nameTable2, dataBase.nameDataBase,
                            4, "Matem", "2018-07-20", 202);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + dataBase.selectFromTable2(dataBase.nameDataBase, dataBase.nameTable2));
                    inputTable.setText("");
                    break;
                case 3:
                    dataBase.insertTable3(dataBase.nameTable3, dataBase.nameDataBase, 606, "Ivan",
                            "Smirnov", "Physics", 2);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + dataBase.selectFromTable3(dataBase.nameDataBase, dataBase.nameTable3));
                    inputTable.setText("");
                    break;
                case 4:
                    dataBase.insertTable4(dataBase.nameTable4, dataBase.nameDataBase, 3, 150);
                    informationBlock.setText("–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:\n" + dataBase.selectFromTable4(dataBase.nameDataBase, dataBase.nameTable4));
                    inputTable.setText("");
                    break;
            }
        } catch (SQLException e) {
            System.out.println("Bad in insert");
        }

    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    private void answerSelectAll() {
        try {
            String out = dataBase.selectFromTable1(dataBase.nameDataBase, dataBase.nameTable1) +
                    "\n\n" + dataBase.selectFromTable2(dataBase.nameDataBase, dataBase.nameTable2) +
                    "\n\n" + dataBase.selectFromTable3(dataBase.nameDataBase, dataBase.nameTable3) +
                    "\n\n" + dataBase.selectFromTable4(dataBase.nameDataBase, dataBase.nameTable4);
            informationBlock.setText(out);
        } catch (SQLException e) {
            System.out.println("Bad in select");
        }

    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–∏—Å–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ë–î, —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    private void answerStart() {
        try {
            //–°–æ–∑–¥–∞–µ–º –ë–î
            dataBase = new DataBase();
            dataBase.createDb(dataBase.MAIN_DB_NAME);

            //–í–Ω–æ—Å–∏–º —Ñ—É–Ω–∫—Ü–∏–∏
            dataBase.fillUpFunctions();

            //–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –∑–∞–ø–æ–ª—è–Ω–µ–º –∏—Ö –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            dataBase.createTable4("locations", dataBase.nameDataBase);
            dataBase.createTable3("lecturer", dataBase.nameDataBase);
            dataBase.createTable2("lections", dataBase.nameDataBase);
            dataBase.createTable1("listeners", dataBase.nameDataBase);
            dataBase.fillUpData();

        } catch (SQLException e) {
            System.out.println("Bad in creating");
        }
    }

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ë–î
    private void answerDropDB() {
        try {
            dataBase.deleteDb(dataBase.nameDataBase);
        } catch (SQLException e) {
            System.out.println("Bad in drop");
        }
    }

    //–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    private void whatNext() {
        inputBlock.setText("");
        typeOfRequiredTable = 0;
        informationBlock.setText("1. SelectAll - –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü" +
                "\n2. ClearAll - –æ—Ç—á–∏—Å—Ç–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü" +
                "\n3. Clear - –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç—á–∏—Å—Ç–∫–∏ –µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ" +
                "\n4. Insert - –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è" +
                "\n5. Search - –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–µ–π" +
                "\n6. Delete - –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–¥–∞–ª–µ–Ω–∏—é –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã" +
                "\n7. Update - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É" +
                "\n8. DropDB - —É–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–π—Ç–∏");
    }

    //–ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫
    public static void main(String[] args) {
        Application.launch(args);
    }
}
